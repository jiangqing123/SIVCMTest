// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// SigmaXC
Eigen::MatrixXd SigmaXC(double rho, Eigen::MatrixXd SigmaX);
RcppExport SEXP _SIVCMTest_SigmaXC(SEXP rhoSEXP, SEXP SigmaXSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type SigmaX(SigmaXSEXP);
    rcpp_result_gen = Rcpp::wrap(SigmaXC(rho, SigmaX));
    return rcpp_result_gen;
END_RCPP
}
// knC
Eigen::MatrixXd knC(Eigen::MatrixXd x, double h);
RcppExport SEXP _SIVCMTest_knC(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(knC(x, h));
    return rcpp_result_gen;
END_RCPP
}
// locallinear0C
Eigen::MatrixXd locallinear0C(double p, double x0, double hx, Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _SIVCMTest_locallinear0C(SEXP pSEXP, SEXP x0SEXP, SEXP hxSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(locallinear0C(p, x0, hx, x, y));
    return rcpp_result_gen;
END_RCPP
}
// locallinear1C
Eigen::MatrixXd locallinear1C(double p, double x0, double hy, Eigen::MatrixXd x, Eigen::MatrixXd y);
RcppExport SEXP _SIVCMTest_locallinear1C(SEXP pSEXP, SEXP x0SEXP, SEXP hySEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    Rcpp::traits::input_parameter< double >::type hy(hySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(locallinear1C(p, x0, hy, x, y));
    return rcpp_result_gen;
END_RCPP
}
// dlogetaC
Eigen::MatrixXd dlogetaC(Eigen::MatrixXd xb, Eigen::MatrixXd y, double hy);
RcppExport SEXP _SIVCMTest_dlogetaC(SEXP xbSEXP, SEXP ySEXP, SEXP hySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type hy(hySEXP);
    rcpp_result_gen = Rcpp::wrap(dlogetaC(xb, y, hy));
    return rcpp_result_gen;
END_RCPP
}
// cseffC
Eigen::MatrixXd cseffC(Eigen::MatrixXd x, Eigen::MatrixXd y, Eigen::MatrixXd beta, double hx, double hy);
RcppExport SEXP _SIVCMTest_cseffC(SEXP xSEXP, SEXP ySEXP, SEXP betaSEXP, SEXP hxSEXP, SEXP hySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< double >::type hy(hySEXP);
    rcpp_result_gen = Rcpp::wrap(cseffC(x, y, beta, hx, hy));
    return rcpp_result_gen;
END_RCPP
}
// allcseffC
Eigen::MatrixXd allcseffC(Eigen::MatrixXd x, Eigen::MatrixXd ally, double m, Eigen::VectorXd tm, double s, Eigen::MatrixXd beta, double hx, double hy, double h);
RcppExport SEXP _SIVCMTest_allcseffC(SEXP xSEXP, SEXP allySEXP, SEXP mSEXP, SEXP tmSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP hxSEXP, SEXP hySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ally(allySEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< double >::type hy(hySEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(allcseffC(x, ally, m, tm, s, beta, hx, hy, h));
    return rcpp_result_gen;
END_RCPP
}
// sumseffC
Eigen::MatrixXd sumseffC(Eigen::MatrixXd x, Eigen::MatrixXd ally, double m, Eigen::VectorXd tm, double s, Eigen::MatrixXd beta, double hx, double hy, double h);
RcppExport SEXP _SIVCMTest_sumseffC(SEXP xSEXP, SEXP allySEXP, SEXP mSEXP, SEXP tmSEXP, SEXP sSEXP, SEXP betaSEXP, SEXP hxSEXP, SEXP hySEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ally(allySEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tm(tmSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type hx(hxSEXP);
    Rcpp::traits::input_parameter< double >::type hy(hySEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(sumseffC(x, ally, m, tm, s, beta, hx, hy, h));
    return rcpp_result_gen;
END_RCPP
}
// gestC
Eigen::MatrixXd gestC(double h1, Eigen::MatrixXd x, Eigen::MatrixXd betaest, Eigen::MatrixXd vec_allxb, Eigen::MatrixXd vec_ally, Eigen::MatrixXd gest);
RcppExport SEXP _SIVCMTest_gestC(SEXP h1SEXP, SEXP xSEXP, SEXP betaestSEXP, SEXP vec_allxbSEXP, SEXP vec_allySEXP, SEXP gestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type betaest(betaestSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vec_allxb(vec_allxbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vec_ally(vec_allySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type gest(gestSEXP);
    rcpp_result_gen = Rcpp::wrap(gestC(h1, x, betaest, vec_allxb, vec_ally, gest));
    return rcpp_result_gen;
END_RCPP
}
// delC
Eigen::MatrixXd delC(Eigen::MatrixXd x, Eigen::MatrixXd xdel, int n);
RcppExport SEXP _SIVCMTest_delC(SEXP xSEXP, SEXP xdelSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type xdel(xdelSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(delC(x, xdel, n));
    return rcpp_result_gen;
END_RCPP
}
// cvC
Eigen::MatrixXd cvC(Eigen::VectorXd vh, Eigen::MatrixXd x, Eigen::MatrixXd ally, Eigen::MatrixXd betaest, Eigen::MatrixXd vec_allxb, Eigen::MatrixXd vec_y, Eigen::MatrixXd vec_cv, Eigen::MatrixXd gest, Eigen::MatrixXd CV);
RcppExport SEXP _SIVCMTest_cvC(SEXP vhSEXP, SEXP xSEXP, SEXP allySEXP, SEXP betaestSEXP, SEXP vec_allxbSEXP, SEXP vec_ySEXP, SEXP vec_cvSEXP, SEXP gestSEXP, SEXP CVSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type vh(vhSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type ally(allySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type betaest(betaestSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vec_allxb(vec_allxbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vec_y(vec_ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type vec_cv(vec_cvSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type gest(gestSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type CV(CVSEXP);
    rcpp_result_gen = Rcpp::wrap(cvC(vh, x, ally, betaest, vec_allxb, vec_y, vec_cv, gest, CV));
    return rcpp_result_gen;
END_RCPP
}
// Q
Eigen::VectorXd Q(Eigen::MatrixXd M, Eigen::MatrixXd VX, Eigen::MatrixXd VY, Eigen::MatrixXd W);
RcppExport SEXP _SIVCMTest_Q(SEXP MSEXP, SEXP VXSEXP, SEXP VYSEXP, SEXP WSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M(MSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type VX(VXSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type VY(VYSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type W(WSEXP);
    rcpp_result_gen = Rcpp::wrap(Q(M, VX, VY, W));
    return rcpp_result_gen;
END_RCPP
}
// kroneckerC
Eigen::MatrixXd kroneckerC(Eigen::MatrixXd M1, Eigen::MatrixXd M2);
RcppExport SEXP _SIVCMTest_kroneckerC(SEXP M1SEXP, SEXP M2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M1(M1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type M2(M2SEXP);
    rcpp_result_gen = Rcpp::wrap(kroneckerC(M1, M2));
    return rcpp_result_gen;
END_RCPP
}
// TnC
double TnC(Eigen::MatrixXd U, Eigen::MatrixXd angle, double n, double M);
RcppExport SEXP _SIVCMTest_TnC(SEXP USEXP, SEXP angleSEXP, SEXP nSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(TnC(U, angle, n, M));
    return rcpp_result_gen;
END_RCPP
}
// NMCTnC
double NMCTnC(Eigen::MatrixXd U, Eigen::MatrixXd En, Eigen::MatrixXd angle, Eigen::MatrixXd Cn, double n, double M);
RcppExport SEXP _SIVCMTest_NMCTnC(SEXP USEXP, SEXP EnSEXP, SEXP angleSEXP, SEXP CnSEXP, SEXP nSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type En(EnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cn(CnSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(NMCTnC(U, En, angle, Cn, n, M));
    return rcpp_result_gen;
END_RCPP
}
// TrueNMCTnC
double TrueNMCTnC(Eigen::MatrixXd U, Eigen::MatrixXd En, Eigen::MatrixXd angle, double n, double M);
RcppExport SEXP _SIVCMTest_TrueNMCTnC(SEXP USEXP, SEXP EnSEXP, SEXP angleSEXP, SEXP nSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U(USEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type En(EnSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(TrueNMCTnC(U, En, angle, n, M));
    return rcpp_result_gen;
END_RCPP
}
// BootTnC
double BootTnC(Eigen::MatrixXd NewU, Eigen::MatrixXd angle, double n, double M);
RcppExport SEXP _SIVCMTest_BootTnC(SEXP NewUSEXP, SEXP angleSEXP, SEXP nSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type NewU(NewUSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type angle(angleSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(BootTnC(NewU, angle, n, M));
    return rcpp_result_gen;
END_RCPP
}
// CnC
Eigen::MatrixXd CnC(Eigen::MatrixXd X, double n);
RcppExport SEXP _SIVCMTest_CnC(SEXP XSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(CnC(X, n));
    return rcpp_result_gen;
END_RCPP
}
// PatTnC
double PatTnC(int n, int M, double h, Eigen::MatrixXd U0, Eigen::MatrixXd DisKF, Eigen::MatrixXd delta);
RcppExport SEXP _SIVCMTest_PatTnC(SEXP nSEXP, SEXP MSEXP, SEXP hSEXP, SEXP U0SEXP, SEXP DisKFSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type U0(U0SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type DisKF(DisKFSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(PatTnC(n, M, h, U0, DisKF, delta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SIVCMTest_SigmaXC", (DL_FUNC) &_SIVCMTest_SigmaXC, 2},
    {"_SIVCMTest_knC", (DL_FUNC) &_SIVCMTest_knC, 2},
    {"_SIVCMTest_locallinear0C", (DL_FUNC) &_SIVCMTest_locallinear0C, 5},
    {"_SIVCMTest_locallinear1C", (DL_FUNC) &_SIVCMTest_locallinear1C, 5},
    {"_SIVCMTest_dlogetaC", (DL_FUNC) &_SIVCMTest_dlogetaC, 3},
    {"_SIVCMTest_cseffC", (DL_FUNC) &_SIVCMTest_cseffC, 5},
    {"_SIVCMTest_allcseffC", (DL_FUNC) &_SIVCMTest_allcseffC, 9},
    {"_SIVCMTest_sumseffC", (DL_FUNC) &_SIVCMTest_sumseffC, 9},
    {"_SIVCMTest_gestC", (DL_FUNC) &_SIVCMTest_gestC, 6},
    {"_SIVCMTest_delC", (DL_FUNC) &_SIVCMTest_delC, 3},
    {"_SIVCMTest_cvC", (DL_FUNC) &_SIVCMTest_cvC, 9},
    {"_SIVCMTest_Q", (DL_FUNC) &_SIVCMTest_Q, 4},
    {"_SIVCMTest_kroneckerC", (DL_FUNC) &_SIVCMTest_kroneckerC, 2},
    {"_SIVCMTest_TnC", (DL_FUNC) &_SIVCMTest_TnC, 4},
    {"_SIVCMTest_NMCTnC", (DL_FUNC) &_SIVCMTest_NMCTnC, 6},
    {"_SIVCMTest_TrueNMCTnC", (DL_FUNC) &_SIVCMTest_TrueNMCTnC, 5},
    {"_SIVCMTest_BootTnC", (DL_FUNC) &_SIVCMTest_BootTnC, 4},
    {"_SIVCMTest_CnC", (DL_FUNC) &_SIVCMTest_CnC, 2},
    {"_SIVCMTest_PatTnC", (DL_FUNC) &_SIVCMTest_PatTnC, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_SIVCMTest(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
